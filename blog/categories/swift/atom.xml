<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | 小巴童鞋]]></title>
  <link href="http://baxiang123.com//blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://baxiang123.com//"/>
  <updated>2015-03-15T05:35:31+08:00</updated>
  <id>http://baxiang123.com//</id>
  <author>
    <name><![CDATA[小巴]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在同个工程中使用 Swift 和 Objective-C]]></title>
    <link href="http://baxiang123.com//blog/6-Swift%20and%20Objective-C%20in%20the%20Same%20Project.html"/>
    <updated>2015-03-16T00:00:00+08:00</updated>
    <id>http://baxiang123.com//blog/6-Swift and Objective-C in the Same Project</id>
    <content type="html"><![CDATA[<p>Swift 与 Objective-C 的兼容能力使你可以在同一个工程中同时使用两种语言。你可以用这种叫做 <code>mix and match</code> 的特性来开发基于混合语言的应用，可以用 Swift 的最新特性实现应用的一部分功能，并无缝地并入已有的 Objective-C 的代码中。</p>

<h3>Mix and Match 概述</h3>

<p>Objective-C 和 Swift 文件可以在一个工程中并存，不管这个工程原本是基于 Objective-C 还是 Swift。你可以直接往现有工程中简单地添加另一种语言的源文件。这种自然的工作流使得创建混合语言的应用或框架 target，与用单独一种语言时一样简单。</p>

<!-- more -->


<p>混合语言的工作流程只有一点点区别，这取决于你是在写应用还是写框架。下面描述了普通的用两种语言在一个 target 中导入模型的情况，后续章节会有更多细节。</p>

<p><img src="https://raw.githubusercontent.com/haolloyin/Welcome-to-Swift/translate/Using%20Swift%20with%20Cocoa%20and%20Objective-C/03Mix%20and%20Match/DAG_2x.png?raw=true" alt="DAG_2x.png" /></p>

<p><a name="importing_code_from_within_the_same_app_target"></a></p>

<h3>在同个应用的 target 中导入</h3>

<p>如果你在写混合语言的应用，可能需要用 Swift 代码访问 Objective-C 代码，或者反之。下面的流程描述了在非框架 target 中的应用。</p>

<h4>将 Objective-C 导入 Swift</h4>

<p>在一个应用的 target 中导入一些 Objective-C 文件供 Swift 代码使用时，你需要依赖于 Objective-C 的桥接头文件（<code>bridging header</code>）来暴露给 Swift。当你添加 Swift 文件到现有的 Objective-C 应用（或反之）时，Xcode 会自动创建这些头文件。</p>

<p><img src="https://raw.githubusercontent.com/haolloyin/Welcome-to-Swift/translate/Using%20Swift%20with%20Cocoa%20and%20Objective-C/03Mix%20and%20Match/bridgingheader_2x.png?raw=true" alt="bridgingheader_2x.png" /></p>

<p>如果你同意，Xcode 会在源文件创建的同时生成头文件，并用 product 的模块名加上 <code>-Bridging-Header.h</code> 命名。关于 product 的模块名，详见 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_85">Naming Your Product Module</a>。</p>

<p>你应该编辑这个头文件来对 Swift 暴露出 Objective-C 代码。</p>

<h5>在同一 target 中将 Objective-C 代码导入到 Swift 中</h5>

<ol>
<li>在 Objective-C 桥接头文件中，import 任何你想暴露给 Swift 的头文件，例如：</li>
</ol>


<pre><code class="objective-c">// OBJECTIVE-C

#import "XYZCustomCell.h"
#import "XYZCustomView.h"
#import "XYZCustomViewController.h"
</code></pre>

<ol>
<li>确保在 <code>Build Settings</code> 中 Objective-C 桥接头文件的 <code>build setting</code> 是基于 Swfit 编译器，即 <code>Code Generation</code> 含有头文件的路径。这个路径必须是头文件自身的路径，而不是它所在的目录。</li>
</ol>


<p>这个路径应该是你工程的相对路径，类似 <code>Info.plist</code> 在 <code>Build Settings</code> 中指定的路径。在大多数情况下，你不需要修改这个设置。</p>

<p>在这个桥接头文件中列出的所有 public 的 Objective-C 头文件都会对 Swift 可见。之后当前 target 的所有 Swift 文件都可以使用这些头文件中的方法，不需要任何 import 语句。用 Swift 语法使用这些 Objective-C 代码，就像使用系统自带的 Swift 类一样。</p>

<pre><code class="swift">// SWIFT

let myCell = XYZCustomCell()
myCell.subtitle = "A custom cell"
</code></pre>

<h4>将 Swift 导入 Objective-C</h4>

<p>向 Objective-C 中导入Swift 代码时，你依赖 Xcode 生成的头文件来向 Objective-C 暴露 Swift 代码。这是自动生成 Objective-C 头文件，它包含了你的 target 中所有 Swift 代码中定义的接口。可以把这个 Objective-C 头文件看作 Swift 代码的 <code>umbrella header</code>。它以 product 模块名加 <code>-Swift.h</code> 来命名。关于 product 的模块名，详见<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_85">Naming Your Product Module</a>。</p>

<p>你不需要做任何事情来生成这个头文件，只需要将它导入到你的 Objective-C 代码来使用它。注意这个头文件中的 Swift 接口包含了它所使用到的所有 Objective-C 类型。如果你在 Swift 代码中使用你自己的 Objective-C 类型，确保先将对应的 Objective-C 头文件导入到你的 Swift 代码中，然后才将 Swift 自动生成的头文件导入到 Objective-C .m 源文件中来访问 Swift 代码。</p>

<h5>在同一 target 中将 Swift 代码导入到 Objective-C 中</h5>

<ul>
<li>在相同 target 的 Objective-C .m 源文件中，用下面的语法来导入Swift 代码：</li>
</ul>


<pre><code class="objective-c">// OBJECTIVE-C

#import "ProductModuleName-Swift.h"
</code></pre>

<p>target 中任何 Swift 文件将会对 Objective-C .m 源文件可见，包括这个 import 语句。关于在 Objective-C 代码中使用 Swift 代码，详见 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_84">Using Swift from Objective-C</a>。</p>

<table>
<thead>
<tr>
<th>              </th>
<th style="text-align:center;"> 导入到 Swift </th>
<th style="text-align:center;"> 导入到 Objective-C  </th>
</tr>
</thead>
<tbody>
<tr>
<td> Swift 代码    </td>
<td style="text-align:center;"> 不需要import语句  </td>
<td style="text-align:center;"> #import &ldquo;ProductModuleName-Swift.h”  </td>
</tr>
<tr>
<td> Objective-C 代码     </td>
<td style="text-align:center;"> 不需要import语句；需要 Objective-C bridging头文件</td>
<td style="text-align:center;"> #import &ldquo;Header.h&rdquo;     </td>
</tr>
</tbody>
</table>


<p><a name="importing_code_from_within_the_same_framework_target"></a></p>

<h3>在同个 Framework 的 target 中导入</h3>

<p>如果你在写一个混合语言的框架，可能会从 Swift 代码访问 Objective-C 代码，或者反之。</p>

<h4>将 Objective-C 导入 Swift</h4>

<p>要将一些 Objective-C 文件导入到同个框架 target 的 Swift 代码中去，你需要将这些文件导入到 Objective-C 的 <code>umbrella header</code> 来供框架使用。</p>

<h6>在同一 framework 中将 Objective-C 代码导入到 Swift 中</h6>

<p>确保将框架 target 的 <code>Build Settings &gt; Packaging &gt; Defines Module</code> 设置为 <code>Yes</code>。然后在你的 <code>umbrella header</code> 头文件中导入你想暴露给 Swift 访问的 Objective-C 头文件，例如：</p>

<pre><code class="objective-c">// OBJECTIVE-C
#import &lt;XYZ/XYZCustomCell.h&gt;
#import &lt;XYZ/XYZCustomView.h&gt;
#import &lt;XYZ/XYZCustomViewController.h&gt;
</code></pre>

<p>Swift 将会看到所有你在 <code>umbrella header</code> 中公开暴露出来的头文件，框架 target 中的所有 Swift 文件都可以访问你 Objective-C 文件的内容，不需要任何 import 语句。</p>

<pre><code class="swift">// SWIFT

let myCell = XYZCustomCell()
myCell.subtitle = "A custom cell"
</code></pre>

<h4>将 Swift 导入 Objective-C</h4>

<p>要将一些 Swift 文件导入到同个框架的 target 的 Objective-C 代码去，你不需要导入任何东西到 <code>umbrella header</code> 文件，而是将 Xcode 为你的 Swift 代码自动生成的头文件导入到你的 Obj .m 源文件去，以便在 Objective-C 代码中访问 Swift 代码。</p>

<h6>在同一 framework 中将 Swift 代码导入到 Objective-C 中</h6>

<p>确保将框架 target 的 <code>Build Settings &gt; Packaging</code> 中的 <code>Defines Module</code> 设置为 <code>Yes</code>。用下面的语法将 Swift 代码导入到同个框架 target 下的 Objective-C .m 源文件去。</p>

<pre><code class="objective-c">// OBJECTIVE-C
#import &lt;ProductName/ProductModuleName-Swift.h&gt;
</code></pre>

<p>这个 import 语句所包含的 Swift 文件都可以被同个框架 target 下的 Objective-C .m 源文件访问。关于在 Objective-C 代码中使用 Swift 代码，详见 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_84">Using Swift from Objective-C</a>。</p>

<table>
<thead>
<tr>
<th>              </th>
<th style="text-align:center;"> 导入到 Swift </th>
<th style="text-align:center;"> 导入到 Objective-C  </th>
</tr>
</thead>
<tbody>
<tr>
<td> Swift 代码    </td>
<td style="text-align:center;"> 不需要import语句  </td>
<td style="text-align:center;"> #import &ldquo;ProductName/ProductModuleName-Swift.h&rdquo;  </td>
</tr>
<tr>
<td> Objective-C 代码     </td>
<td style="text-align:center;"> 不需要import语句；需要 Objective-C umbrella头文件</td>
<td style="text-align:center;"> #import &ldquo;Header.h&rdquo;     </td>
</tr>
</tbody>
</table>


<p><a name="importing_external_frameworks"></a></p>

<h3>导入外部 Framework</h3>

<p>你可以导入外部框架，不管这个框架是纯 Objective-C，纯 Swift，还是混合语言的。import 外部框架的流程都是一样的，不管这个框架是用一种语言写的，还是包含两种语言。当你导入外部框架时，确保 <code>Build Setting &gt; Pakaging &gt; Defines Module</code> 设置为 <code>Yes</code>。</p>

<p>用下面的语法将框架导入到不同 target 的 Swift 文件中：</p>

<pre><code class="swift">// SWIFT

import FrameworkName
</code></pre>

<p>用下面的语法将框架导入到不同 target 的 Objective-C .m 文件中：</p>

<pre><code class="objective-c">// OBJECTIVE-C

@import FrameworkName;
</code></pre>

<table>
<thead>
<tr>
<th>           </th>
<th style="text-align:center;"> 导入到 Swift </th>
<th style="text-align:center;"> 导入到 Objective-C  </th>
</tr>
</thead>
<tbody>
<tr>
<td>任意语言框架 </td>
<td style="text-align:center;"> import FrameworkName </td>
<td style="text-align:center;"> @import FrameworkName; </td>
</tr>
</tbody>
</table>


<p><a name="using_swift_from_objective-c"></a></p>

<h3>在 Objective-C 中使用 Swift</h3>

<p>当你将 Swift 代码导入 Objective-C 文件之后，用普通的 Objective-C 语法使用 Swift 类。</p>

<pre><code class="objective-c">// OBJECTIVE-C

MySwiftClass *swiftObject = [[MySwiftClass alloc] init];
[swiftObject swiftMethod];
</code></pre>

<p>Swift 的类或协议必须用 <code>@Objective-C attribute</code> 来标记，以便在 Objective-C 中可访问。这个 attribute 告诉编译器这个 Swift 代码可以从 Objective-C 代码中访问。如果你的 Swift 类是 Objective-C 类的子类，编译器会自动为你添加 <code>@Objective-C attribute</code>。详见 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-XID_36">Swift Type Compatibility</a>。</p>

<p>你可以访问 Swift 类或协议中用 <code>@Objective-C attribute</code> 标记过东西，只要它和 Objective-C 兼容。不包括以下这些 Swift 独有的特性：</p>

<ul>
<li><p>Generics - 范型</p></li>
<li><p>Tuples - 元组</p></li>
<li><p>Enumerations defined in Swift - Swift 中定义的枚举</p></li>
<li><p>Structures defined in Swift - Swift 中定义的结构体</p></li>
<li><p>Top-level functions defined in Swift - Swift 中定义的顶层函数</p></li>
<li><p>Global variables defined in Swift - Swift 中定义的全局变量</p></li>
<li><p>Typealiases defined in Swift - Swift 中定义的类型别名</p></li>
<li><p>Swift-style variadics  - Swift风格可变参数</p></li>
<li><p>Nested types - 嵌套类型</p></li>
<li><p>Curried functions - 柯里化后的函数</p></li>
</ul>


<p>例如带有范型类型作为参数，或者返回元组的方法不能在 Objective-C 中使用。</p>

<p>为了避免循环引用，不要将 Swift 代码导入到 Objective-C 头文件中。但是你可以在 Objective-C 头文件中前向声明（<code>forward declare</code>）一个 Swift 类来使用它，然而，注意<strong>不能在 Objective-C 中继承一个 Swift 类</strong>。</p>

<h3>在 Objective-C 头文件中引用 Swift 类</h3>

<p>这样前向声明 Swift 类：</p>

<pre><code class="objective-c">// OBJECTIVE-C
// MyObjective-CClass.h

@class MySwiftClass;

@interface MyObjective-CClass : NSObject
- (MySwiftClass *)returnSwiftObject;
/* ... */
@end
</code></pre>

<p><a name="naming_your_product_module"></a></p>

<h3>Product 模块命名</h3>

<p>Xcode 为 Swift 代码生成的头文件的名称，以及 Xcode 创建的 Objective-C 桥接头文件名称，都是从你的 product 模块名生成的。默认你的 product 模块名和 product 名一样。然而，如果你的 product 名有特殊字符（nonalphanumeric，非数字、字母的字符），例如点号，那么它们会被下划线（<code>_</code>）替换之后作为你的 product 模块名。如果 product 名以数字开头，那么第一个数字会用下划线替换掉。</p>

<p>你可以给 product 模块名提供一个自定义的名称，Xcode 会用这个名称来命名桥接的和自动生成的头文件。你只需要在修改在 <code>build setting</code> 中的 <code>Product Module Name</code> 即可。</p>

<p><a name="troubleshooting_tips_and_reminders"></a></p>

<h3>问题解决提示</h3>

<ul>
<li>把 Swift 和 Objective-C 文件看作相同的代码集合，并注意命名冲突；</li>
<li>如果你用框架，确保 <code>Build Setting &gt; Pakaging &gt; Defines Module</code> 设置为 <code>Yes</code>；</li>
<li>如果你使用 Objective-C 桥接头文件，确保在 <code>Build Settings</code> 中 Objective-C 桥接头文件的 <code>build setting</code> 是基于 Swfit 编译器，即 <code>Code Generation</code> 含有头文件的路径。这个路径必须是头文件自身的路径，而不是它所在的目录；</li>
<li>Xcode 使用你的 product 模块名，而不是 target 名来命名 Objective-C 桥接头文件和为 Swift 自动生成的头文件。详见 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_85">Naming Your Product Module</a>；</li>
<li>为了在 Objective-C 中可用， Swift 类必须是 Objective-C 类的子类，或者用 <code>@Objective-C</code> 标记；</li>
<li>当你将 Swift 导入到 Objective-C 中时，记住 Objective-C 不会将 Swift 独有的特性翻译成 Objective-C 对应的特性。详见列表 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_84">Using Swift from Objective-C</a>；</li>
<li>如果你在 Swift 代码中使用你自己的 Objective-C 类型，确保先将对应的 Objective-C 头文件导入到你的 Swift 代码中，然后才将 Swift 自动生成的头文件 import 到 Objective-C .m 源文件中来访问 Swift 代码。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[与 C 语言交互编程]]></title>
    <link href="http://baxiang123.com//blog/5-Interacting%20with%20C%20APIs.html"/>
    <updated>2015-03-16T00:00:00+08:00</updated>
    <id>http://baxiang123.com//blog/5-Interacting with C APIs</id>
    <content type="html"><![CDATA[<p>作为一种可与 Objective-C 相互调用的语言，Swift 也具有一些与 C 语言的类型和特性，如果你的代码有需要，Swift 也提供了和常见的 C 代码结构混合编程的编程方式。<!--more--></p>

<h3>基本数据类型</h3>

<p>Swift 提供了一些和 C 语言的基本类型如<code>char</code>，<code>int</code>，<code>float</code>，<code>double</code>等价的 Swift 基本数据类型。然而，这些 Swift 的核心基本类型之间并不能隐式的相互转换，如 Int。因此，只有你的代码明确要求它们时再使用这些类型，而 Int 可以在任何你想使用它的时候使用。</p>

<table>
<thead>
<tr>
<th> C 类型 </th>
<th> Swift 类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td> bool </td>
<td> CBool </td>
</tr>
<tr>
<td> char, signed char </td>
<td> CChar </td>
</tr>
<tr>
<td> unsigned char </td>
<td> CUnsignedChar </td>
</tr>
<tr>
<td> short </td>
<td> CShort </td>
</tr>
<tr>
<td> unsigned short </td>
<td> CUnsignedShort </td>
</tr>
<tr>
<td> int </td>
<td> CInt </td>
</tr>
<tr>
<td> unsigned int </td>
<td> CUnsignedInt </td>
</tr>
<tr>
<td> long </td>
<td> CLong </td>
</tr>
<tr>
<td> unsigned long </td>
<td> CUnsignedLong </td>
</tr>
<tr>
<td> long long </td>
<td> CLongLong </td>
</tr>
<tr>
<td> unsigned long long </td>
<td> CUnsignedLongLong </td>
</tr>
<tr>
<td> wchar_t </td>
<td> CWideChar </td>
</tr>
<tr>
<td> char16_t </td>
<td> CChar16 </td>
</tr>
<tr>
<td> char32_t </td>
<td> CChar32 </td>
</tr>
<tr>
<td> float </td>
<td> CFloat </td>
</tr>
<tr>
<td> double </td>
<td> CDouble </td>
</tr>
</tbody>
</table>


<p><a name="enumerations"></a></p>

<h3>枚举</h3>

<p>Swift 引进了用宏<code>NS_ENUM</code>来标记的任何 C 风格的枚举类型。这意味着无论枚举值是在系统框架还是在自定义的代码中定义的，当他们导入到 Swift 时，他们的前缀名称将被截断。例如，看这个 Objective-C 枚举：</p>

<pre><code class="objective-c">//Objective-C
typedef NS_ENUM(NSInteger, UITableViewCellStyle) {
    UITableViewCellStyleDefault,
    UITableViewCellStyleValue1,
    UITableViewCellStyleValue2,
    UITableViewCellStyleSubtitle
};
</code></pre>

<p>在 Swift 中这样来实现：</p>

<pre><code class="swift">//Swift
enum UITableViewCellStyle: Int {
    case Default
    case Value1
    case Value2
    case Subtitle
    }
</code></pre>

<p>当您需要指向一个枚举值时，使用以点（.）开头的枚举名称：</p>

<pre><code class="swift">//Swift
let cellStyle: UITableViewCellStyle = .Default
</code></pre>

<p>Swift 也引进了标有<code>NS_OPTIONS</code>宏选项。而选项的行为类似于引进的枚举，选项还可以支持一些位操作，如 ＆，| 和 〜。在 Objective-C 中，你用一个空的选项设置标示恒为零（0）。在 Swift 中，使用 <code>nil</code>代表没有任何选项。</p>

<p><a name="pointer"></a></p>

<h3>指针</h3>

<p>Swift 尽可能避免让您直接访问指针。然而，当您需要直接操作内存的时候，Swift 也为您提供了多种指针类型。下面的表使用 Type 作为占位符类型名称来表示语法的映射。</p>

<p>对于参数，使用以下映射：</p>

<table>
<thead>
<tr>
<th> C 句法 </th>
<th> Swift 句法 </th>
</tr>
</thead>
<tbody>
<tr>
<td> const void * </td>
<td> CConstVoidPointer </td>
</tr>
<tr>
<td> void * </td>
<td> CMutableVoidPointer </td>
</tr>
<tr>
<td> const Type * </td>
<td> CConstPointer\&lt;Type> </td>
</tr>
<tr>
<td> Type * </td>
<td> CMutablePointer\&lt;Type> </td>
</tr>
</tbody>
</table>


<p>对于返回类型，变量和参数类型的多层次指针，使用以下映射：</p>

<table>
<thead>
<tr>
<th> C 句法 </th>
<th> Swift 句法 </th>
</tr>
</thead>
<tbody>
<tr>
<td> void * </td>
<td> COpaquePointer </td>
</tr>
<tr>
<td> Type * </td>
<td> UnsafePointer\&lt;Type> </td>
</tr>
</tbody>
</table>


<p>对于类（class）类型，使用以下映射：</p>

<table>
<thead>
<tr>
<th> C 句法 </th>
<th> Swift 句法 </th>
</tr>
</thead>
<tbody>
<tr>
<td> Type * const * </td>
<td> CConstPointer\&lt;Type> </td>
</tr>
<tr>
<td> Type * __strong * </td>
<td> CMutablePointer\&lt;Type> </td>
</tr>
<tr>
<td> Type ** </td>
<td> AutoreleasingUnsafePointer\&lt;Type> </td>
</tr>
</tbody>
</table>


<h4>C 可变指针</h4>

<p>当一个函数被声明为接受<code>CMutablePointer&lt;Type&gt;</code>参数时，这个函数可以接受下列任何一个类型作为参数：</p>

<ul>
<li><code>nil</code>，作为空指针传入</li>
<li>一个<code>CMutablePointer&lt;Type&gt;</code>类型的值</li>
<li>一个操作数是 <code>Type</code> 类型的左值的输入输出表达式，作为这个左值的内存地址传入</li>
<li>一个输入输出 <code>Type[]</code> 值，作为一个数组的起始指针传入，并且它的生命周期将在这个调用期间被延长</li>
</ul>


<p>如果您像这样声明了一个函数：</p>

<pre><code class="swift">//Swift
func takesAMutablePointer(x: CMutablePointer&lt;Float&gt;) { /*...*/ }
</code></pre>

<p>那么您可以使用以下任何一种方式来调用这个函数：</p>

<pre><code class="swift">//Swift
var x: Float = 0.0
var p: CMutablePointer&lt;Float&gt; = nil
var a: Float[] = [1.0, 2.0, 3.0]

takesAMutablePointer(nil)
takesAMutablePointer(p)
takesAMutablePointer(&amp;x)
takesAMutablePointer(&amp;a)
</code></pre>

<p>当函数被声明使用一个<code>CMutableVoidPointer</code>参数，那么这个函数接受任何和<code>CMutablePointer&lt;Type&gt;</code>相似类型的<code>Type</code>操作数。</p>

<p>如果您这样定义了一个函数：</p>

<pre><code class="swift">//Swift
func takesAMutableVoidPointer(x: CMutableVoidPointer) { /* ... */ }
</code></pre>

<p>那么您可以使用以下任何一种方式来调用这个函数：</p>

<pre><code class="swift">//Swift
var x: Float = 0.0, y: Int = 0
var p: CMutablePointer&lt;Float&gt; = nil, q: CMutablePointer&lt;Int&gt; = nil
var a: Float[] = [1.0, 2.0, 3.0], b: Int[] = [1, 2, 3]

takesAMutableVoidPointer(nil)
takesAMutableVoidPointer(p)
takesAMutableVoidPointer(q)
takesAMutableVoidPointer(&amp;x)
takesAMutableVoidPointer(&amp;y)
takesAMutableVoidPointer(&amp;a)
takesAMutableVoidPointer(&amp;b)
</code></pre>

<h4>C 常指针</h4>

<p>当一个函数被声明为接受<code>CConstPointer&lt;Type&gt;</code>参数时，这个函数可以接受下列任何一个类型作为参数：</p>

<ul>
<li><code>nil</code>，作为空指针传入</li>
<li>一个<code>CMutablePointer&lt;Type&gt;</code>, <code>CMutableVoidPointer</code>, <code>CConstPointer&lt;Type&gt;</code>, <code>CConstVoidPointer</code>,  或者在必要情况下转换成<code>CConstPointer&lt;Type&gt;</code>的<code>AutoreleasingUnsafePointer&lt;Type&gt;</code>值</li>
<li>一个操作数是 <code>Type</code> 类型的左值的输入输出表达式，作为这个左值的内存地址传入</li>
<li>一个<code>Type[]</code>数组值，作为一个数组的起始指针传入，并且它的生命周期将在这个调用期间被延长</li>
</ul>


<p>如果您这样定义了一个函数：</p>

<pre><code class="swift">//Swift
func takesAConstPointer(x: CConstPointer&lt;Float&gt;) { /*...*/ }
</code></pre>

<p>那么您可以使用以下任何一种方式来调用这个函数：</p>

<pre><code class="swift">//Swift
var x: Float = 0.0
var p: CConstPointer&lt;Float&gt; = nil

takesAConstPointer(nil)
takesAConstPointer(p)
takesAConstPointer(&amp;x)
takesAConstPointer([1.0, 2.0, 3.0])
</code></pre>

<p>当函数被声明使用一个<code>CConstVoidPointer</code>参数，那么这个函数接受任何和<code>CConstPointer&lt;Type&gt;</code> 相似类型的<code>Type</code>操作数。
￼
如果您这样定义了一个函数：</p>

<pre><code class="swift">//Swift
￼￼￼￼func takesAConstVoidPointer(x: CConstVoidPointer) { /* ... */ }
</code></pre>

<p>那么您可以使用以下任何一种方式来调用这个函数：</p>

<pre><code class="swift">//Swift
var x: Float = 0.0, y: Int = 0
var p: CConstPointer&lt;Float&gt; = nil, q: CConstPointer&lt;Int&gt; = nil 

takesAConstVoidPointer(nil)
takesAConstVoidPointer(p)
takesAConstVoidPointer(q)
takesAConstVoidPointer(&amp;x)
takesAConstVoidPointer(&amp;y)
takesAConstVoidPointer([1.0, 2.0, 3.0]) 
takesAConstVoidPointer([1, 2, 3])
</code></pre>

<h4>自动释放不安全指针</h4>

<p>当一个函数被声明为接受<code>AutoreleasingUnsafePointer&lt;Type&gt;</code>参数时，这个函数可以接受下列任何一个类型作为参数：</p>

<ul>
<li><code>nil</code>，作为空指针传入</li>
<li>一个<code>AutoreleasingUnsafePointer&lt;Type&gt;</code>值</li>
<li>其操作数是原始的，复制到一个临时的没有所有者的缓冲区的一个输入输出表达式，该缓冲区的地址传递给调用，并返回时，缓冲区中的值加载，保存，并重新分配到操作数。</li>
</ul>


<p><strong>注意：这个列表没有包含数组。</strong></p>

<p>如果您这样定义了一个函数：</p>

<pre><code class="swift">//Swift
func takesAnAutoreleasingPointer(x: AutoreleasingUnsafePointer&lt;NSDate?&gt;) { /* ... */ }
</code></pre>

<p>那么您可以使用以下任何一种方式来调用这个函数：</p>

<pre><code class="swift">//Swift
var x: NSDate? = nil
var p: AutoreleasingUnsafePointer&lt;NSDate?&gt; = nil
￼￼￼￼￼
takesAnAutoreleasingPointer(nil)
takesAnAutoreleasingPointer(p)
takesAnAutoreleasingPointer(&amp;x)
</code></pre>

<p><strong>注意：C 语言函数指针没有被 Swift 引进。</strong></p>

<p><a name="global_constants"></a></p>

<h3>全局常量</h3>

<p>在 C 和 Objective-C 语言源文件中定义的全局常量会自动地被 Swift 编译引进并做为 Swift 的全局常量。</p>

<p><a name="preprocessor_directives"></a></p>

<h3>预处理指令</h3>

<p>Swift 编译器不包含预处理器。取而代之的是，它充分利用了编译时属性，生成配置，和语言特性来完成相同的功能。因此，Swift 没有引进预处理指令。</p>

<h4>简单宏</h4>

<p>在 C 和 Objective-C，您通常使用的#define指令定义的一个宏常数，在 Swift，您可以使用全局常量来代替。例如：一个全局定义<code>#define FADE_ANIMATION_DURATION 0.35</code>，在 Swift 可以使用<code>let FADE_ANIMATION_DURATION = 0.35</code>来更好的表述。由于简单的用于定义常量的宏会被直接被映射成 Swift 全局量，Swift 编译器会自动引进在 C 或 Objective-C 源文件中定义的简单宏。</p>

<h4>复杂宏</h4>

<p>在 C 和 Objective-C 中使用的复杂宏在 Swift 中并没有与之对应的定义。复杂宏是那些不用来定义常量的宏，而是用来定义包含小括号（），函数的宏。您在 C 和 Objective-C 使用复杂的宏是用来避免类型检查的限制和相同代码的重复劳动。然而，宏也会产生Bug和重构的困难。在 Swift 中你可以直接使用函数和泛型来达到同样的效果。因此，在 C 和 Objective-C 源文件中定义的复杂宏在 Swift 是不能使用的。</p>

<h4>编译配置</h4>

<p>Swift 代码和 Objective-C 代码以不同的方式进行条件编译。Swift 代码可以根据生成配置的评价配进行有条件的编译。生成配置包括 <code>true</code> 和 <code>false</code> 字面值，命令行标志，和下表中的平台测试函数。您可以使用-D \&lt;＃Flag＃>指定命令行标志。</p>

<table>
<thead>
<tr>
<th> 函数 </th>
<th> 有效参数 </th>
</tr>
</thead>
<tbody>
<tr>
<td> os() </td>
<td> OSX, iOS </td>
</tr>
<tr>
<td> arch() </td>
<td> x86_64, arm, arm64, i386 </td>
</tr>
</tbody>
</table>


<blockquote><p>注意</p>

<p>arch(arm) 的生成配置不会为64位 ARM 设备返回<code>true</code>，当代码运行在为32位的 iOS 模拟器器时，arch(i386) 的生成配置返回<code>true</code>。</p></blockquote>

<p>一个简单的条件编译需要以下代码格式：</p>

<pre><code class="swift">#if build configuration
    statements
#else
    statements
#endif
</code></pre>

<p>一个由零个或多个有效的 Swift 语句声明的<code>statements</code>，可以包括表达式，语句和控制流语句。您可以添加额外的构建配置要求，条件编译说明用 &amp;&amp; 和 | | 操作符以及 ！ 操作符，添加条件控制块用 ＃elseif：</p>

<pre><code class="swift">#if build configuration &amp;&amp; !build configuration
    statements
#elseif build configuration
    statements
#else
    statements
#endif 
</code></pre>

<p>与 C 语言编译器的条件编译相反，Swift 条件编译语句必须完全是自包含和语法有效的代码块。这是因为 Swift 代码即使没有被编译，也要全部进行语法检查。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[与 Cocoa 数据类型共舞]]></title>
    <link href="http://baxiang123.com//blog/3-Working%20with%20Cocoa%20Data%20Types.html"/>
    <updated>2015-03-16T00:00:00+08:00</updated>
    <id>http://baxiang123.com//blog/3-Working with Cocoa Data Types</id>
    <content type="html"><![CDATA[<p>作为对 Objective-C 互用性（互操作性）的一部分，Swift提供快捷高效的方式来处理 Cocoa 数据类型。</p>

<p>Swift 会自动将一些 Objective-C 类型转换为 Swift 类型，以及将 Swift 类型转换为 Objective-C 类型。在 Objective-C 和 Swift 中也有一些具有互用性的数据类型。那些可转换的数据类型或者具有互用性的数据类型被称为<em>bridged</em>数据类型。举个例子，在 Swift 中，您可以将一个<code>Array</code>值传递给一个要求为<code>NSArray</code>对象的方法。你也可以转换一个 bridged 类型和它的副本。当你使用<code>as</code>转换 bridged 类型或者那些由常量和变量所提供的类型时，Swift 会桥接它们的数据类型。</p>

<p>Swift 也提供一种简单便捷的覆盖方法来连接 Foundation 的数据类型，在后面的 Swift 语言中，你能在它的句法中感受到自然和统一。</p>

<!--more-->


<p><a name = "strings"></a></p>

<h3>字符串</h3>

<p>Swift会在<code>String</code>类型和<code>NSString</code>类型中自动转换。这意味着在可以使用<code>NSString</code>对象的地方，您可以使用一个属于 Swift 的<code>String</code>类型代替它，这样做会同时拥有它们数据类型的特点，<code>String</code>类型的插值，基于Swift设计的APIs以及<code>NSString</code>类更广的适用范围。因此，您几乎不必再在你的代码中使用<code>NSString</code>类。事实上，当 Swift 接入 Objective-C APIs 时，它将把所有<code>NSString</code>类型替换为<code>String</code>类型。当您在您的Objective-C代码中使用 Swift 类时，接入的API会将所有<code>String</code>类型替换成<code>NSString</code>类型。</p>

<p>为了允许字符串转换，只需接入 Foundation。举个例子，您在 Swift 的一个字符串中调用了<code>capitalizedString</code>&ndash;一个<code>NSString</code>类的方法，此后 Swift 会自动将<code>String</code>转换为一个<code>NSString</code>对象并调用方法。这个方法甚至会返回一个 Swift 的<code>String</code>类型，因为它在接入的时候被替换了。</p>

<pre><code class="swift">import Foundation
let greeting = "hello, world!"
let capitalizedGreeting = greeting.capitalizedString
// capitalizedGreeting: String = Hello, World!
</code></pre>

<p>如果您确实需要用到一个<code>NSString</code>对象，您可以用一个 Swift 的<code>String</code>值并转换它。<code>String</code>类型总是可以从一个<code>NSString</code>对象转换为一个Swift的<code>String</code>的值，因此，再没有必要去使用一个可选的类型转换器<code>()as?)</code>。您也可以在一个字符串中通过定义常量和变量来创建一个<code>NSString</code>对象。</p>

<pre><code class="swift">import Foundation
let myString: NSString = "123"
if let integerValue = (myString as String).toInt()){
    println("\(myString) is the integer \(integerValue)") 
}
</code></pre>

<h4>本地化</h4>

<p>在Objective-C中，常用<code>NSLocalizedString</code>类的宏来定位一个字符串。这集合的宏包括<code>NSLocalizedStringFromTableInBundle</code>和<code>NSLocalizedStringWithDefaultValue</code>。而在Swift中，只用一个函数就可以实现跟整个<code>NSLocalizedString</code>集一样的功能，即<code>NSLocalizedString(key:tableName:bundle:value:comment:)</code>。这个<code>NSLocalizedString</code>函数分别为<code>tableName</code>，<code>bundle</code>和<code>value</code>参数提供了一个默认值。你可以用它来替换宏。</p>

<p><a name = "numbers"></a></p>

<h3>数字</h3>

<p>Swift会自动将已确定的数字类型<code>Int</code>和<code>Float</code>转换为<code>NSNumber</code>。这样的转换允许你基于其中一种类型创建一个<code>NSNumber</code>：</p>

<pre><code>let n = 42
let m: NSNumber = n
</code></pre>

<p>你也能传递一个<code>Int</code>类型的值，比如传递给一个要求为<code>NSNumber</code>类型的参数。同时需要注意的是，<code>NSNumber</code>可以包含多种不同的类型，因此您不能把它传递给单一的一个<code>Int</code>值。</p>

<p>下面所列出的类型都会自动转换为<code>NSNumber</code>：</p>

<ul>
<li><code>Int</code></li>
<li><code>UInt</code></li>
<li><code>Float</code></li>
<li><code>Double</code></li>
<li><code>Bool</code></li>
</ul>


<p><a name = "collection_classes"></a></p>

<h3>类集合</h3>

<p>Swift 会自动将<code>NSArray</code>和<code>NSDictionary</code>类转换为Swift里等价的类。这意味着你将受益于Swift强大的算法和得天独厚的语法来处理集合&ndash;可互相转换的 Foundation 和 Swift 集合类型。</p>

<h4>数组</h4>

<p>Swift 会在<code>Array</code>类型和<code>NSArray</code>类型中自动转换。当你从一个 Swift 数组转换到一个<code>NSArray</code>对象，转换后的数组是一个<code>AnyObject[]</code>类型的数组。如果某个对象是 Objective-C 或者 Swift 类的实例，或者这个对象可以转换成另一种类型，那么这个对象则属于<code>AnyObject</code>类型的对象。你可以将任一<code>NSArray</code>对象转换成一个 Swift 数组，因为所有 Objective-C 的对象都是<code>AnyObject</code>类型的。正因如此，Swift 的编译器会在接入 Objective-C APIs 的时候将<code>NSArray</code>类替换成<code>AnyObject[]</code>。</p>

<p>当你将一个<code>NSArray</code>对象转换成一个 Swift 数组后，你也可以将数组强制类型转换成一个特定的类型。与从<code>NSArray</code>类转换到<code>AnyObject[]</code>不同的是，从<code>AnyObject</code>类型的对象转换成明确的类型并不会保证成功。由于直到运行时编译器才知道<code>AnyObject</code>的对象能否被强制转换为特定的类型，因此，从<code>AnyObject[]</code>转换为<code>SomeType[]</code>会返回一个 optional 的值。举个例子，如果你知道一个Swift数组只包含<code>UIView</code>类的实例(或者一个<code>UIView</code>类的子类)，你可以将<code>AnyObject</code>类型的数组元素强制转换为<code>UIView</code>对象。如果Swift数组中的元素在运行时不是<code>UIView</code>类型的对象，那么转换则会返回<code>nil</code>。</p>

<pre><code class="swift">let swiftyArray = foundationArray as AnyObject[]
if let downcastedSwiftArray = swiftArray as? UIView[] {
    // downcastedSwiftArray contains only UIView objects
}
</code></pre>

<p>你也可以在for循环中将NSArray对象定向地强制转换为特定类型的Swift数组:</p>

<pre><code class="swift">for aView: UIView! in foundationArray {
     // aView is of type UIView
}
</code></pre>

<blockquote><p>注意：这种转换是强制转换，如果转换不成功则会在运行时产生错误信息。</p></blockquote>

<p>当你从 Swift 数组转换为<code>NSArray</code>对象时，Swift 数组里的元素必须是属于<code>AnyObject</code>的。例如，一个<code>Int[]</code>类型的 Swift 数组包含<code>Int</code>结构的元素。<code>Int</code>类型并不是一个类的实例，但由于<code>Int</code>类型转换成了<code>NSNumber</code>类，<code>Int</code>类型属于<code>AnyObject</code>类型的。因此，你可以将一个<code>Int[]</code>类型的Swift数组转换为<code>NSArray</code>对象。如果 Swift 数组里的一个元素不属于<code>AnyObject</code>类型，那么在运行时就会产生错误。</p>

<p>你也可以从 Swift 数组中创建一个<code>NSArray</code>对象。当你将一个常量或变量定义为一个<code>NSArray</code>对象并分配一个数组给它作为实例变量时，Swift 将会创建 <code>NSArray</code>对象，而不是 Swift 数组。</p>

<pre><code class="swift">let schoolSupplies: NSArray = ["Pencil", "Eraser", "Notebkko"]
// schoolSupplies is an NSArray object containing NSString objects
</code></pre>

<p>上面的例子中，Swift 数组包含包含三个<code>String</code>字符串。由于从<code>String</code>类型转换为<code>NSString</code>类，数组字面量被转换成一个<code>NSArray</code>对象，并成功分配给<code>schoolSupplies</code>变量。</p>

<p>当您在 Objective-C 代码中使用 Swift 类或者协议时，接入的API会将全部所有类型的Swift数组代替为<code>NSArray</code>。若您将一个<code>NSArray</code>对象传递给Swift的API并要求数组元素为一个新的类型，运行时就会产生错误。如果 Swift API 返回一个不能被转换为<code>NSArray</code>类型的 Swift 数组，错误也会随之产生。</p>

<h4>字典</h4>

<p>敬请期待</p>

<p><a name = "foundation_data_types"></a></p>

<h3>Foundation数据类型</h3>

<p>Swift 也提供一种简单便捷的覆盖方法来连接定义在 Foundation 框架中的数据类型。在<code>NSSize</code>和<code>NSPoint</code>中使用覆盖方法，在剩下的 Swift 语言中，你能在它的句法中感受到自然和统一。比如，你可以使用如下语法创建一个<code>NSSize</code>类型的结构:</p>

<pre><code class="swift">let size = NSSize(width: 20, height: 40)
</code></pre>

<p>覆盖方法也允许你以一种自然的方式调用 Foundation 的结构函数。</p>

<pre><code class="swift">let rect = NSRect(x: 50, y: 50, width: 100, height: 100)
let width = rect.width    // equivalent of NSWidth(rect)
let maxX = rect.maxY      // equivalent of NSMaxY(rect)
</code></pre>

<p>Swift可以将<code>NSUInteger</code>和<code>NSInteger</code>转换为<code>Int</code>类型。这些类型都会在 Foundation APIs 中变为<code>Int</code>类型。在 Swift 中<code>Int</code>常被尽可能地用以连贯性，同时当你要求一个无符号整数类型时，<code>UInt</code>类型总是可使用的。</p>

<p><a name = "foundation_functions"></a></p>

<h3>Foundation函数</h3>

<p>在 Swift 中，<code>NSLog</code>可在系统控制台输出信息。您可以像在 Objective-C 中使用过的语法格式那样使用此函数。</p>

<pre><code class="swift">NSLog("%.7f", pi)         // Logs "3.1415927" to the console
</code></pre>

<p>同时，Swift 也提供像<code>print</code>和<code>println</code>那样的输出函数。多归于 Swift 的字符插值机制才让这些函数简单，粗暴，多效。这些函数不会在系统控制台输出信息，但在需要调用的时候却是可用的。</p>

<p>Swift 中不再存在<code>NSAssert</code>函数，取而代之的是<code>assert</code>函数。</p>

<p><a name = "core_foundation"></a></p>

<h3>Core Foundation</h3>

<p>Swift中的 Core Foundation 类型是一个成熟的类。当出现内存管理注释时，Swift 会自动地管理 Core Foundation 对象的内存，这其中包括你实例化了的 Core Foundation 对象。在 Swift 中，你可以自由变换 Fundation 和 Core Foundation 类型。如果你想先转换为桥接 Foundation 类型时，你也可以桥接一些 toll-free bridged Core Foundation 类型到 Swift 标准库类型。</p>

<h4>重定义类型</h4>

<p>当 Swift 导入 Core Foundation 类型时，编译器会重映射导入的类型名字。编译器会从每个类型名字的末端移除 <em>Ref</em>，这是因为所有的 Swift 类都属于引用类型，因此后缀是多余的。</p>

<p>Core Foundation 中的<code>CFTypeRef</code>类型会对<code>Anyobject</code>类型重映射。所以你以前使用的<code>CFTypeRef</code>，现在该换成<code>AnyObject</code>了。</p>

<h4>内存管理对象</h4>

<p>在 Swift 中，从 annotated APIs 返回的 Core Foundation 对象能够自动进行内存管理&ndash;你不再需要调用自身的<code>CFRetain</code>，<code>CFRelease</code>，或者<code>CFAutorelease</code>函数。如果你从自身的C函数和 Objective-C 方法中返回一个 Core Foundation 对象，你需要用<code>CF_RETURNS_RETAINED</code>或者<code>CF_RETURNS_NOT_RETAINED</code>注释这个对象。当 Swift 代码中包含这些 APIs 时，编译器会在编译时自动调用内存管理。如果你只调用那些不会间接返回 Core Foundation 对象的 annotated APIs，那么现在你可以跳过本节的剩余部分了。否则，下面我们继续学习非托管的 Core Foundation 对象。</p>

<h4>非托管对象</h4>

<p>当 Swift 导入 unannotated 的APIs时，编译器将不会自动地对返回的 Core Foundation 对象进行内存管理托管。Swift 将这些返回的 Core Foundation 对象封闭在一个<code>Unmanaged&lt;T&gt;</code>结构中。那些间接返回 Core Foundation 的对象也是非托管的。举个例子，这里有一个 unannotated 的 C 函数:</p>

<pre><code class="swift">CFStringRef StringByAddingTwoStrings(CFStringRef string1, CFStringRef string2)
</code></pre>

<p>这里说明了Swift是怎么导入的:</p>

<pre><code class="swift">func StringByAddingTwoStrings(CFString!, CFString!) -&gt; Unmanaged&lt;CFString&gt;!
</code></pre>

<p>假设您从 unannotated APIs 接收了非托管的对象，在使用它之前，你必须将它转换为能够内存管理的对象。在这方面，Swift 可以帮你进行内存管理而不用自己动手。同时，<code>Unmanaged&lt;T&gt;</code>结构也提供了两个方法来把一个非托管对象转换为一个可内存管理的对象&ndash;<code>takeUnretainedValue()</code>方法和<code>takeRetainedValue()</code>方法。这两个方法会返回原始的，非封闭的对象类型。您可以根据您实际调用的APIs返回的unretained或retained的对象，来选择哪一方法更合适。</p>

<p>比如，假设这里有一个 C 函数，这个函数在返回值前不会释放<code>CFString</code>对象。在使用这个对象前，您使用<code>takeUnretainedValue()</code>函数，以将它转换为一个能够内存管理托管的对象。</p>

<pre><code class="swift">let memoryManagedResult = StringByAddingTwoStrings(str1, str2).takeUnretainedValue()
// memoryManagedResult is a memory managed CFString
</code></pre>

<p>您也可以在一个非托管的对象中使用<code>retain()</code>，<code>release()</code>和<code>autorelease()</code>方法，但是这种做法并不值得推荐。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Objective-C特性编写Swift类]]></title>
    <link href="http://baxiang123.com//blog/2-Writing%20Swift%20Classes%20with%20Objective-C%20Behavior.html"/>
    <updated>2015-03-16T00:00:00+08:00</updated>
    <id>http://baxiang123.com//blog/2-Writing Swift Classes with Objective-C Behavior</id>
    <content type="html"><![CDATA[<p>互用性（互操作性）使开发者可以定义融合了 Objective-C 语言特性的Swift类。编写 Swift 类时，不仅可以继承 Objective-C 语言编写的父类，采用 Objective-C 的协议，还可以利用 Objective-C 的一些其它功能。这意味着，开发者可以基于 Objective-C 中已有的熟悉、可靠的类、方法和框架来创建 Swift 类，并结合 Swift 提供的现代化和更有效的语言特点对其进行优化。</p>

<!--more-->


<p><a name="inheriting_from_objective-c_classes"></a></p>

<h3>继承Objective-C的类</h3>

<p>在 Swift 中，开发者可以定义一个子类，该子类继承自使用 Objective-C 编写的类。创建该子类的方法是，在 Swift 的类名后面加上一个冒号（:），冒号后面跟上 Objective-C 的类名。</p>

<pre><code class="swift">import UIKit

class MySwiftViewController: UIViewController {
    // 定义类
}
</code></pre>

<p>开发者能够从 Objective-C 的父类中继承所有的功能。如果开发者要覆盖父类中的方法，不要忘记使用<code>override</code>关键字。</p>

<p><a name="adopting_protocols"></a></p>

<h3>采用协议</h3>

<p>在 Swift 中，开发者可以采用 Objective-C 中定义好的协议。和 Swift 协议一样，所有 Objective-C 协议都写在一个用逗号隔开的列表中，跟在所在类的父类名后面（如果它有父类的话）。</p>

<pre><code class="swift">class MySwiftViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {
    // 定义类
}
</code></pre>

<p>Objective-C 协议与 Swift 协议使用上是一致的。如果开发者想在 Swift 代码中引用 <code>UITableViewDelegate</code>协议，可以直接使用<code>UITableViewDelegate</code>（跟在 Objective-C 中引用<code>id&lt;UITableViewDelegate&gt;</code>是等价的）。</p>

<p><a name="writing_initializers_and_deinitializers"></a></p>

<h3>编写构造器和析构器</h3>

<p>Swift 的编译器确保在初始化时，构造器不允许类里有任何未初始化的属性，这样做能够增加代码的安全性和可预测性。另外，与 Objective-C 语言不同，Swift 不提供单独的内存分配方法供开发者调用。当你使用原生的 Swift 初始化方法时（即使是和 Objective-C 类协作），Swift 会将 Objective-C 的初始化方法转换为 Swift 的初始化方法。关于如何实现开发者自定义构造器的更多信息，请查看<a href="https://github.com/CocoaChina-editors/Welcome-to-Swift/blob/master/The%20Swift%20Programming%20Language/02Language%20Guide/14Initialization.md">构造器</a>。</p>

<p>当开发者希望在类被释放前，执行额外的清理工作时，需要执行一个析构过程来代替<code>dealloc</code>方法。在实例被释放前，Swift 会自动调用析构器来执行析构过程。Swift 调用完子类的析构器后，会自动调用父类的析构器。当开发者使用 Objective-C 类或者是继承自 Objective-C 类的 Swift 类时，Swift 也会自动为开发者调用这个类的父类里的<code>dealloc</code>方法。关于如何实现开发者自定义析构器的更多信息，请查看<a href="https://github.com/CocoaChina-editors/Welcome-to-Swift/blob/master/The%20Swift%20Programming%20Language/02Language%20Guide/15Deinitialization.md">析构器</a>。</p>

<p><a name="integrating_with_interface_builder"></a></p>

<h3>集成Interface Builder</h3>

<p>Swift 编译器包含一些属性，使得开发者的 Swift 类集成了 Interface Builder 里的一些特色功能。和 Objective-C 里一样，你能在 Swift 里面使用 outlets，actions 和实时渲染（live rendering）。</p>

<h3>使用Outlets和Action</h3>

<p>使用 Outlets 和 Action 可以连接源代码和 Interface Builder 的 UI 对象。在Swift里面使用 Outlets 和 Action，需要在属性和方法声明前插入<code>@IBOutlet</code>或者<code>@IBAction</code>关键字。声明一个 Outlet 集合同样是用<code>@IBOutlet</code>属性，即为类型指定一个数组。</p>

<p>当开发者在 Swift 里面声明了一个 Outlet 时，Swift 编译器会自动将该类型转换为弱（weak）、隐式（implicitly）、未包装（unwrapped）的 optional（Objective-C 里面对应指针类型）数据类型，并为它分配一个初始化的空值<code>nil</code>。实际上，编译器使用<code>@IBOutlet weak var name: Type! = nil</code>来代替 <code>@IBOutlet var name: Type</code>。编译器将该类型转换成了弱（weak）、隐式（implicitly）、未包装（unwrapped）的 optional 类型，因此开发者就不需要在构造器中为该类型分配一个初始值了。当开发者从故事板（storyboard）或者<code>xib</code>文件里面初始化对象 class 后，定义好的 Outlet 和这些对象连接在一起了，所以，这些 Outlet 是隐式的，未包装的。由于创建的 outlets 一般都是弱关系，因此默认 outlets 是弱类型。</p>

<p>例如，下面的 Swift 代码声明了一个拥有 Outlet、Outlet 集合和 Action 的类：</p>

<pre><code class="swift">
class MyViewController: UIViewController {

    @IBOutlet var button: UIButton

    @IBOutlet var textFields: UITextField[]

    @IBAction func buttonTapped(AnyObject) {
        println("button tapped!")
    }
}
</code></pre>

<p>在<code>buttonTapped</code>方法中，消息发送者的信息没有被使用，因此可以省略该方法的参数名。</p>

<h4>实时渲染（live rendering）</h4>

<p>开发者可以在 Interface Builder 中用<code>@IBDesignable</code>和<code>@IBInspectable</code>来创建生动、可交互的自定义视图（view）。开发者继承<code>UIView</code>或者<code>NSView</code>来自定义一个视图（view）时，可以在类声明前添加<code>@IBDesignable</code>属性。当你在 Interface Builder 里添加了自定义的视图后（在监视器面板的自定义视图类中进行设置），Interface Builder 将在画布上渲染你自定义的视图。</p>

<blockquote><p>注意：只能针对框架里对象进行实时渲染</p></blockquote>

<p>你也可以将<code>@IBInspectable</code>属性添加到和用户定义的运行时属性兼容的类型属性里。这样，当开发者将自定义的视图添加到 Interface Builder 里后，就可以在监视器面板中编辑这些属性。</p>

<pre><code class="swift">@IBDesignable

class MyCustomView: UIView {
    @IBInspectable var textColor: UIColor
    @IBInspectable var iconHeight: CGFloat
    /* ... */
}
</code></pre>

<p><a name="specifying_property_attributes"></a></p>

<h3>指明属性特性</h3>

<p>在 Objective-C 中，属性通常都有一组特性（Attributes）说明来指明该属性的一些附加信息。在 Swift 中，开发者可以通过不同的方法来指明属性的这些特性。</p>

<h4>强类型和弱类型</h4>

<p>Swift 里属性默认都是强类型的。使用<code>weak</code>关键字修饰一个属性，能指明其对象存储时是一个弱引用。该关键字仅能修饰 optional 对象类型。更多的信息，请查阅<a href="https://github.com/CocoaChina-editors/Welcome-to-Swift/blob/master/The%20Swift%20Programming%20Language/02Language%20Guide/09Classes%20and%20Structures.md">特性</a>。</p>

<h4>读／写和只读</h4>

<p>在 Swift 中，没有<code>readwrite</code>和<code>readonly</code>特性。当声明一个存储型属性时，使用<code>let</code>修饰其为只读；使用<code>var</code>修饰其为可读／写。当声明一个计算型属性时，为其提供一个 getter 方法，使其成为只读的；提供 getter 方法和 setter 方法，使其成为可读／写的。更多信息，请查阅<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html#//apple_ref/doc/uid/TP40014097-CH13">属性</a>。</p>

<h4>拷贝</h4>

<p>在 Swift 中，Objective-C 的<code>copy</code>特性被转换为<code>@NSCopying</code>属性。这一类的属性必须遵守 <code>NSCopying</code>协议。更多信息，请查阅<a href="https://github.com/CocoaChina-editors/Welcome-to-Swift/blob/master/The%20Swift%20Programming%20Language/02Language%20Guide/09Classes%20and%20Structures.md">特性</a>。</p>

<p><a name="implementing_core_data_managed_object_subclasses"></a></p>

<h3>实现Core Data Managed Object子类</h3>

<p>Core Data 提供了基本存储和实现<code>NSManagedObject</code>子类的一组属性。在与Core Data 模型中管理对象子类相关的特性或者关系的每个属性定义之前，将<code>@NSmanaged</code>特性加入。与 Objective-C 里面的 <code>@dynamic</code>特性类似，<code>@NSManaged</code>特性告知 Swift 编译器，这个属性的存储和实现将在运行时完成。但是，与<code>@dynamic</code>不同的是，<code>@NSManaged</code>特性仅在 Core Data 支持中可用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[与 Objective-C 的 API 交互]]></title>
    <link href="http://baxiang123.com//blog/1-Interacting%20with%20Objective-C%20APIs.html"/>
    <updated>2015-03-16T00:00:00+08:00</updated>
    <id>http://baxiang123.com//blog/1-Interacting with Objective-C APIs</id>
    <content type="html"><![CDATA[<p><strong>互用性</strong>是让 Swift 和 Objective-C 相接合的一种特性，使你能够在一种语言编写的文件中使用另一种语言。当你准备开始把 Swift 融入到你的开发流程中时，你应该懂得如何利用互用性来重新定义并提高你写 Cocoa 应用的方案。</p>

<p>互用性很重要的一点就是允许你在写 Swift 代码时使用 Objective-C 的 API 接口。当你导入一个 Objective-C 框架后，你可以使用原生的 Swift 语法实例化它的 Class 并且与之交互。</p>

<!--more-->


<p><a name="initialization"></a></p>

<h3>初始化</h3>

<p>为了使用 Swift 实例化 Objective-C 的 Class，你应该使用 Swift 语法调用它的一个初始化器。当 Objective-C 的<code>init</code>方法变化到 Swift，他们用 Swift 初始化语法呈现。“init”前缀被截断当作一个关键字，用来表明该方法是初始化方法。那些以“initWith”开头的<code>init</code>方法，“With”也会被去除。从“init”或者“initWith”中分离出来的这部分方法名首字母变成小写，并且被当做是第一个参数的参数名。其余的每一部分方法名依次变为参数名。这些方法名都在圆括号中被调用。</p>

<p>举个例子，你在使用 Objective-C 时会这样做：</p>

<pre><code class="objective-c">//Objective-C
UITableView *myTableView = [[UITableView alloc] 
initWithFrame:CGRectZero style:UITableViewStyleGrouped];
</code></pre>

<p>在 Swift 中，你应该这样做：</p>

<pre><code class="swift">//Swift
let myTableView: UITableView = UITableView(frame: CGRectZero, style: .Grouped)
</code></pre>

<p>你不需要调用 alloc，Swift 能替你处理。注意，当使用 Swift 风格的初始化函数的时候，“init”不会出现。</p>

<p>你可以在初始化时显式的声明对象的类型，也可以忽略它，Swift 能够正确判断对象的类型。</p>

<pre><code class="swift">//Swift
let myTextField = UITextField(frame: CGRect(0.0, 0.0, 200.0, 40.0))
</code></pre>

<p>这里的<code>UITableView</code>和<code>UITextField</code>对象和你在 Objective-C 中使用的具有相同的功能。你可以用一样的方式使用他们，包括访问属性或者调用各自的类中的方法。</p>

<p>为了统一和简易，Objective-C 的工厂方法也在 Swift 中映射为方便的初始化方法。这种映射能够让他们使用同样简洁明了的初始化方法。例如，在 Objective-C 中你可能会像下面这样调用一个工厂方法：</p>

<pre><code class="objective-c">//Objective-C
UIColor *color = [UIColor colorWithRed:0.5 green:0.0 blue:0.5 alpha:1.0];
</code></pre>

<p>在 Swift 中，你应该这样做：</p>

<pre><code class="swift">//Swift
let color = UIColor(red: 0.5, green: 0.0, blue: 0.5, alpha: 1.0)
</code></pre>

<p><a name="accessing_properties"></a></p>

<h3>访问属性</h3>

<p>在 Swift 中访问和设置 Objective-C 对象的属性时，使用点语法</p>

<pre><code class="swift">//Swift
myTextField.textColor = UIColor.darkGrayColor()
myTextField.text = "Hello world"
if myTextField.editing {
    myTextField.editing = false
}
</code></pre>

<p>当 get 或 set 属性时，直接使用属性名称，不需要附加圆括号。注意，<code>darkGrayColor</code>后面附加了一对圆括号，这是因为<code>darkGrayColor</code>是<code>UIColor</code>的一个类方法，不是一个属性。</p>

<p>在 Objective-C 中，一个有返回值的无参数方法可以被作为一个隐式的访问函数，并且可以与访问器使用同样的方法调用。但在 Swift 中不再能够这样做了，只有使用<code>@property</code>关键字声明的属性才会被作为属性引入。</p>

<p><a name="working_with_methods"></a></p>

<h3>方法</h3>

<p>在 Swift 中调用 Objective-C 方法时，使用点语法。</p>

<p>当 Objective-C 方法转换到 Swift 时，Objective-C 的<code>selector</code>的第一部分将会成为方法名并出现在圆括号的前面，而第一个参数将直接在括号中出现，并且没有参数名，而剩下的参数名与参数则一一对应的填入圆括号中。</p>

<p>举个例子，你在使用 Objective-C 时会这样做：</p>

<pre><code class="objective-c">//Objective-C
[myTableView insertSubview:mySubview atIndex:2];
</code></pre>

<p>在 Swift 中，你应该这样做：</p>

<pre><code class="swift">//Swift
myTableView.insertSubview(mySubview, atIndex: 2)
</code></pre>

<p>如果你调用一个无参方法，仍必须在方法名后面加上一对圆括号</p>

<pre><code class="swift">//Swift
myTableView.layoutIfNeeded()
</code></pre>

<p><a name="id_compatibility"></a></p>

<h3>id 兼容性（id Compatibility）</h3>

<p>Swift 包含一个叫做<code>AnyObject</code>的协议类型，表示任意类型的对象，就像 Objective-C 中的<code>id</code>一样。<code>AnyObject</code>协议允许你编写类型安全的 Swift 代码同时维持无类型对象的灵活性。因为<code>AnyObject</code>协议保证了这种安全，Swift 将 id 对象导入为 AnyObject。</p>

<p>举个例子，跟 id 一样，你可以为<code>AnyObject</code>类型的对象分配任何其它类型的对象，你也同样可以为它重新分配其它类型的对象。</p>

<pre><code class="swift">//Swift
var myObject: AnyObject = UITableViewCell()
myObject = NSDate()
</code></pre>

<p>你也可以在调用 Objective-C 方法或者访问属性时不将它转换为具体类的类型。这包括了 Objective-C 中标记为 @objc 的方法。</p>

<pre><code class="swift">//Swift
let futureDate = myObject.dateByAddingTimeInterval(10)
let timeSinceNow = myObject.timeIntervalSinceNow
</code></pre>

<p>然而，由于直到运行时才知道<code>AnyObject</code>的对象类型，所以有可能在不经意间写出不安全代码。另外，与 Objective-C 不同的是，如果你调的用方法或者访问的属性 AnyObject 对象没有声明，将会报运行时错误。比如下面的代码在运行时将会报出一个 unrecognized selector error 错误：</p>

<pre><code class="swift">//Swift
myObject.characterAtIndex(5)
// crash, myObject does't respond to that method
</code></pre>

<p>但是，你可以通过 Swift 的 optionals 特性来排除这个 Objective-C 中常见的错误，当你用<code>AnyObject</code>对象调用一个 Objective-C 方法时，这次调用将会变成一次隐式展开 optional（implicitly unwrapped optional）的行为。你可以通过 optional 特性来决定 AnyObject 类型的对象是否调用该方法，同样的，你可以把这种特性应用在属性上。</p>

<p>举个例子，在下面的代码中，第一和第二行代码将不会被执行因为<code>length</code>属性和<code>characterAtIndex:</code>方法不存在于 NSDate 对象中。<code>myLength</code>常量会被推测成可选的<code>Int</code>类型并且被赋值为<code>nil</code>。同样你可以使用<code>if-let</code>声明来有条件的展开这个方法的返回值，从而判断对象是否能执行这个方法。就像第三行做的一样。</p>

<pre><code class="swift">//Swift
let myLength = myObject.length?
let myChar = myObject.characterAtIndex?(5)
if let fifthCharacter = myObject.characterAtIndex(5) {
    println("Found \(fifthCharacter) at index 5")
}
</code></pre>

<p>对于 Swift 中的强制类型转换，从 AnyObject 类型的对象转换成明确的类型并不会保证成功，所以它会返回一个可选的值。而你需通过检查该值的类型来确认转换是否成功。</p>

<pre><code class="swift">//Swift
let userDefaults = NSUserDefaults.standardUserDefaults()
let lastRefreshDate: AnyObject? = userDefaults.objectForKey("LastRefreshDate")
if let date = lastRefreshDate as? NSDate {
    println("\(date.timeIntervalSinceReferenceDate)")
}
</code></pre>

<p>当然，如果你能确定这个对象的类型（并且确定不是<code>nil</code>），你可以添加<code>as</code>操作符强制调用。</p>

<pre><code class="swift">//Swift
let myDate = lastRefreshDate as NSDate
let timeInterval = myDate.timeIntervalSinceReferenceDate
</code></pre>

<p><a name="working_with_nil"></a></p>

<h3>使用nil</h3>

<p>在 Objective-C 中，对象的引用可以是值为<code>NULL</code>的原始指针（同样也是Objective-C中的<code>nil</code>）。而在Swift中，所有的值–包括结构体与对象的引用–都被保证为非空。作为替代，你将这个可以为空的值包装为optional type。当你需要宣告值为空时，你需要使用<code>nil</code>。你可以在<a href="https://github.com/CocoaChina-editors/Welcome-to-Swift/blob/master/The%20Swift%20Programming%20Language/02Language%20Guide/01The%20Basics.md#optionals">Optionals</a>中了解更多。</p>

<p>因为Objective-C不会保证一个对象的值是否非空，Swift在引入Objective-C的API的时候，确保了所有函数的返回类型与参数类型都是optional，在你使用Objective-C的API之前，你应该检查并保证该值非空。
在某些情况下，你可能绝对确认某些Objective-C方法或者属性永远不应该返回一个nil的对象引用。为了让对象在这种情况下更加易用，Swift使用 implicitly unwrapped optionals 方法引入对象， implicitly unwrapped optionals 包含optional 类型的所有安全特性。此外，你可以直接访问对象的值而无需检查nil。当你访问这种类型的变量时， implicitly unwrapped optional 首先检查这个对象的值是否不存在，如果不存在，将会抛出运行时错误。</p>

<p><a name="extensions"></a></p>

<h3>扩展（Extensions）</h3>

<p>Swift 的扩展和 Objective-C 的类别（Category）相似。扩展为原有的类，结构和枚举丰富了功能，包括在 Objective-C 中定义过的。你可以为系统的框架或者你自己的类型增加扩展，只需要导入合适的模块并且保证你在 Objective-C 中使用的类、结构或枚举拥有相同的名字。</p>

<p>举个例子，你可以扩展<code>UIBezierPath</code>类来为它增加一个等边三角形，这个方法只需提供三角形的边长与起点。</p>

<pre><code class="swift">//Swift
extension UIBezierPath {
    convenience init(triangleSideLength: Float, origin: CGPoint) {
        self.init()
        let squareRoot = Float(sqrt(3))
        let altitude = (squareRoot * triangleSideLength) / 2
        moveToPoint(origin)
        addLineToPoint(CGPoint(triangleSideLength, origin.x))
        addLineToPoint(CGPoint(triangleSideLength / 2, altitude))
        closePath()
    }
}
</code></pre>

<p>你也可以使用扩展来增加属性（包括类的属性与静态属性）。然而，这些属性必须是通过计算才能获取的，扩展不会为类，结构体，枚举添加存储属性。下面这个例子为<code>CGRect</code>类增加了一个叫<code>area</code>的属性。</p>

<pre><code class="swift">//Swift
extension CGRect {
    var area: CGFloat {
    return width * height
    }
}
let rect = CGRect(x: 0.0, y: 0.0, width: 10.0, height: 50.0)
let area = rect.area
// area: CGFloat = 500.0
</code></pre>

<p>你同样可以使用扩展来为类添加协议而无需增加它的子类。如果这个协议是在 Swift 中被定义的，你可以添加 comformance 到它的结构或枚举中无论它们在 Objective-C 或在 Swift 中被定义。</p>

<p>你不能使用扩展来覆盖 Objective-C 类型中存在的方法与属性。</p>

<p><a name="closures"></a></p>

<h3>闭包（Closures）</h3>

<p>Objective-C 中的<code>blocks</code>会被自动导入为 Swift 中的闭包。例如，下面是一个 Objective-C 中的 block 变量：</p>

<pre><code class="objective-c">//Objective-C
void (^completionBlock)(NSData *, NSError *) = ^(NSData *data, NSError *error) {/* ... */}
</code></pre>

<p>而它在 Swift 中的形式为</p>

<pre><code class="swift">//Swift
let completionBlock: (NSData, NSError) -&gt; Void = {data, error in /* ... */}
</code></pre>

<p>Swift 的闭包与 Objective-C 中的 blocks 能够和睦相处，所以你可以把一个 Swift 闭包传递给一个把 block 作为参数的 Objective-C 函数。Swift 闭包与函数具有互通的类型，所以你甚至可以传递 Swift 函数的名字。</p>

<p>闭包与 blocks 语义上相通但是在一个地方不同：变量是可以直接改变的，而不是像 block 那样会拷贝变量。换句话说，Swift 中变量的默认行为与 Objective-C 中 __block 变量一致。</p>

<p><a name="object_comparison"></a></p>

<h3>比较对象</h3>

<p>当比较两个 Swift 中的对象时，可以使用两种方式。第一种，使用（==），判断两个对象内容是否相同。第二种，使用(===)，判断常量或者变量是否为同一个对象的实例。</p>

<p>Swift 与 Objective-C 一般使用 == 与 === 操作符来做比较。Swift 的 == 操作符为源自 NSObject 的对象提供了默认的实现。在实现 == 操作符时，Swift 调用 NSObject 定义的 isEqual: 方法。</p>

<p>NSObject 类仅仅做了身份的比较，所以你需要在你自己的类中重新实现 isEqual: 方法。因为你可以直接传递 Swift 对象给 Objective-C 的 API，你也应该为这些对象实现自定义的 isEqual: 方法，如果你希望比较两个对象的内容是否相同而不是仅仅比较他们是不是由相同的对象派生。</p>

<p>作为实现比较函数的一部分，确保根据<a href="//https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/DevPedia-CocoaCore/ObjectComparison.html#//apple_ref/doc/uid/TP40008195-CH37">Object comparison</a>实现对象的<code>hash</code>属性。更进一步的说，如果你希望你的类能够作为字典中的键，也需要遵从<code>Hashable</code>协议以及实现<code>hashValues</code>属性。</p>

<p><a name="swift_type_compatibility"></a></p>

<h3>Swift 类型兼容性</h3>

<p>当你定义了一个继承自<code>NSObject</code>或者其他 Objective-C 类的 Swift 类，这些类都能与 Objective-C 无缝连接。所有的步骤都由 Swift 编译器自动完成，如果你从未在 Objective-C 代码中导入 Swift 类，你也不需要担心类型适配问题。另外一种情况，如果你的 Swift 类并不继承于 Objective-C 类而你希望能在 Objective-C 的代码中使用它，你可以使用下面描述的<code>@objc</code>属性。</p>

<p><code>@objc</code>可以让你的 Swift API 在 Objective-C 中使用。换句话说，你可以通过在任何 Swift 方法、类、属性前添加<code>@objc</code>，来使得他们可以在 Objective-C 代码中使用。如果你的类继承自 Objective-C，编译器会自动帮助你完成这一步。编译器还会在所有的变量、方法、属性前加 @objc，如果这个类自己前面加上了<code>@objc</code>关键字。当你使用<code>@IBOutlet</code>，<code>@IBAction</code>，或者是<code>@NSManaged</code>属性时，<code>@objc</code>也会自动加在前面。这个关键字也可以用在 Objetive-C 中的 target-action 设计模式中，例如，<code>NSTimer</code>或者<code>UIButton</code>。</p>

<p>当你在 Objective-C 中使用 Swift API，编译器通常会对语句做直接的翻译。例如，Swift API <code>func playSong(name: String)</code>会被解释为<code>- (void)playSong:(NSString *)name</code>。然而，有一个例外：当在 Objective-C 中使用 Swift 的初始化函数，编译器会在方法前添加“initWith”并且将原初始化函数的第一个参数首字母大写。例如，这个 Swift 初始化函数<code>init (songName: String, artist: String</code>将被翻译为<code>- (instancetype)initWithSongName:(NSString *)songName artist:(NSString *)artist
</code>。</p>

<p>Swift 同时也提供了一个<code>@objc</code>关键字的变体，通过它你可以自定义在 Objective-C 中转换的函数名。例如，如果你的 Swift 类的名字包含 Objective-C 中不支持的字符，你就可以为 Objective-C 提供一个可供替代的名字。如果你要为 Swift 函数提供一个 Objective-C 名字，记得为带参数的函数添加（:）</p>

<pre><code class="swift">//Swift
@objc(Squirrel)
class Белка {
    @objc(initWithName:)
    init (имя: String) { /*...*/ }
    @objc(hideNuts:inTree:)
    func прячьОрехи(Int, вДереве: Дерево) { /*...*/ }
}
</code></pre>

<p>当你在 Swift 类中使用<code>@objc(&lt;#name#&gt;)</code>关键字，这个类可以不需要命名空间即可在 Objective-C 中使用。这个关键字在你迁徙 Objecive-C 代码到 Swift 时同样也非常有用。由于归档过的对象存贮了类的名字，你应该使用<code>@objc(&lt;#name#&gt;)</code>来声明与旧的归档过的类相同的名字，这样旧的类才能被新的 Swift 类解档。</p>

<p><a name="objective_c_selectors"></a></p>

<h3>Objective-C 选择器（Selectors）</h3>

<p>一个 Objective-C 选择器类型指向一个 Objective-C 的方法名。在 Swift 里，Objective-C 的选择器被<code>Selector</code>结构体替代。你可以通过字符串创建一个选择器，比如<code>let mySelector: Selector = "tappedButton:"</code>。因为字符串能够自动转换为选择器，所以你可以把字符串直接传递给任何能够接受选择器的方法。</p>

<pre><code class="swift">//Swift
import UIKit
class MyViewController: UIViewController {
    let myButton = UIButton(frame: CGRect(x: 0, y: 0, width: 100, height: 50))

    init(nibName nibNameOrNil: String!, bundle nibBundleOrNil: NSBundle!) {
        super.init(nibName: nibName, bundle: nibBundle)
        myButton.targetForAction("tappedButton:", withSender: self)
    }

    func tappedButton(sender: UIButton!) {
        println("tapped button")
    }
}
</code></pre>

<blockquote><p>注意</p>

<p><code>performSelector:</code>方法和相关的调用选择器的方法没有导入到 Swift 中因为它们是不安全的。</p></blockquote>

<p>如果你的 Swift 类继承自 Objective-C 的类，你的所有方法都可以用作 Objective-C 的选择器。另外，如果你的 Swift 类不是继承自 Objective-C，如果你想要当选择器来使用你就需要在前面添加<code>@objc</code>关键字，详情请看<a href="#swift_type_compatibility">Swift 类型兼容性</a>。</p>
]]></content>
  </entry>
  
</feed>
