<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: applewatch | 小巴童鞋]]></title>
  <link href="http://baxiang123.com//blog/categories/applewatch/atom.xml" rel="self"/>
  <link href="http://baxiang123.com//"/>
  <updated>2015-06-19T00:38:27+08:00</updated>
  <id>http://baxiang123.com//</id>
  <author>
    <name><![CDATA[小巴]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apple Watch 和 iPhone 通信实践]]></title>
    <link href="http://baxiang123.com//blog/iPhone-watch-communication.html"/>
    <updated>2015-04-26T00:00:00+08:00</updated>
    <id>http://baxiang123.com//blog/iPhone-watch-communication</id>
    <content type="html"><![CDATA[<p>给 iPhone App 添加 Watch App 支持需要在 iPhone 工程中添加 Watch Extension，添加后工程中对应生成两个新的target：WatchKit Extension 和 WatchKit App，分别对应逻辑和界面。开发完成后，WatchKit Extension 和 iPhone App 被一起安装到 iPhone 中，如果 iPhone 有匹配的 Watch，系统会提示是否需要将 WatchKit App 安装到 Watch 上。</p>

<!--more-->


<h2>WatchKit Extension</h2>

<p>WatchKit Extension 是 iPhone App 和 Watch App 通信的桥梁，下图展示了三者间的通信过程：</p>

<p><img src="/images/tech/iPhoneWatchCommunication/iphone_watch_communication.png" alt="list app" /></p>

<h3>1、Extension 和 Watch App ( Host App )的通信</h3>

<p>在 Extension 中可以获取到 Watch App 界面元素的数据接口 WKInterfaceObject（非控件 View 本身，更接近于 Model），通过修改 WKInterfaceObject 的数据，来修改对应Watch App的界面。</p>

<p>另外通过Xcode将Watch App控件的响应事件绑定到Extension中，可以实现Watch操作响应逻辑的处理。</p>

<p>Extension和Watch App的通信在开发实现层面上看起来相对比较简单，开发者只需在接口上实现相关逻辑就可以了，而具体的通信过程，苹果进行了封装，对开发者是不可见的。</p>

<h3>2、Extension 和 iPhone App ( Containing App )的通信</h3>

<p>Extension 和 iPhone App 之间的一种通信方式是读写同一块共享存储空间，达到数据交换的目的目的（见下图）。需要注意的是 Extension 和 iPhone App 属于不同的进程，要共享存储空间，需要在工程对应的 target 中同时打开 App Groups 的权限，并选择共享的组名（打开权限需要在 Xcode 中配置开发者账号和密码，同时本地需要有对应的开发证书）。</p>

<p>但是修改存储文件，并没有达到直接通信的目的。存在这样的问题：iPhone App 对文件进行了修改，Extension 并不知道文件发生了修改，很显然，我们需要通过通知机制告诉 Extension 文件发生了修改，你可以更新新的数据了，本文最后的 Demo 会实现这样的效果。</p>

<p><img src="/images/tech/iPhoneWatchCommunication/share_container.png" alt="list app" /></p>

<p>Extension 和 iPhone App 另外一种通信方式是 Extension 主动向 iPhone App 发起请求，进行某种操作，或者请求数据（场景：Watch 收到新邮件通知后，点击已读按钮，在 iPhone App 上置已读）。</p>

<p>Extension 发起请求：</p>

<pre><code>+ (BOOL)openParentApplication:(NSDictionary *)userInfo
                        reply:(void (^)(NSDictionary *replyInfo,
                                        NSError *error))reply
</code></pre>

<p>iPhone App 回应请求：</p>

<pre><code>- (void)application:(UIApplication *)application
handleWatchKitExtensionRequest:(NSDictionary *)userInfo
              reply:(void (^)(NSDictionary *replyInfo))reply
</code></pre>

<h2>Demo</h2>

<p><a href="https://github.com/mutualmobile/MMWormhole">MMWormhole</a>通过共享存储空间和通知机制实现 Extension 和 iPhone  App 的通信。利用了 CFNotificationCenter 中的 Darwin notification center 来实现进程间通信，即通知机制的实现。大家如果有兴趣可以看看代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用WatchKit实现Page-Based Navigation]]></title>
    <link href="http://baxiang123.com//blog/watchkit-pagebase-navigation.html"/>
    <updated>2015-04-25T00:00:00+08:00</updated>
    <id>http://baxiang123.com//blog/watchkit-pagebase-navigation</id>
    <content type="html"><![CDATA[<p>这篇文章向大家展示如何使用WatchKit创建Page-Based Navigation，我们还是在Helloworld项目的基础上进行改善。</p>

<!-- more -->


<h2>创建Controller</h2>

<p>打开<code>Interface.storyboard</code>，再添加两个Interface Controller，然后给它们添加不同的背景色。</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-pagebase-navigation-1.png" alt="pic" /></p>

<p>现在给每个Controller之间添加Segue，选中第一个Controller，按着control+鼠标左键拖拽至第二个Controller，然后选择next page。</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-pagebase-navigation-2.png" alt="pic" /></p>

<p>编译运行，看看它是如何工作的：</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-pagebase-navigation-3.gif" alt="pic" /></p>

<h2>Interface Controller生命周期</h2>

<p>接下来我们自定义两个<code>WKInterfaceController</code>，分别设置给新添加的两个Interface Controller。然后我们来看看InterfaceController的生命周期。首先在<code>GreenInterfaceController</code>和<code>RedInterfaceController</code>中添加如下三个方法：</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-pagebase-navigation-4.png" alt="pic" /></p>

<p>编译运行，当Watch模拟器显示出内容时，在控制台中我们可以看到<code>GreenInterfaceController</code>和<code>RedInterfaceController</code>执行了<code>init</code>方法：</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-pagebase-navigation-5.png" alt="pic" /></p>

<p>当切换到绿色InterfaceController时，在控制台中可以看到<code>GreenInterfaceController</code>执行了<code>willActivate</code>方法：</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-pagebase-navigation-6.png" alt="pic" />
当切换到粉红色InterfaceController时，在控制台中可以看到<code>RedInterfaceController</code>执行了<code>willActivate</code>方法，而<code>GreenInterfaceController</code>执行了<code>didDeactivate</code>方法：</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-pagebase-navigation-7.png" alt="pic" /></p>

<p>所以由此可见InterfaceController的生命周期主要由三个方法组成：</p>

<ul>
<li><strong>initWithContext</strong>：当Watch App第一次启动，把三个InterfaceController压入栈的时候调用该方法。</li>
<li><strong>willActivate</strong>：当进入InterfaceController时，调用该方法。类似<code>UIViewController</code>中的<code>viewDidAppear</code>方法。</li>
<li><strong>didDeactivate</strong>：当InterfaceController不在当前屏幕显示时调用该方法。类似<code>UIViewController</code>中的<code>viewDidDisappear</code>方法。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用WatchKit创建Table]]></title>
    <link href="http://baxiang123.com//blog/watchkit-create-table.html"/>
    <updated>2015-04-23T00:00:00+08:00</updated>
    <id>http://baxiang123.com//blog/watchkit-create-table</id>
    <content type="html"><![CDATA[<p>上篇文章向大家演示了如何创建一个Helloworld Apple Watch App。这篇文章向大家演示如何使用WatchKit给你的Watch App创建Table。我们在Helloworld项目的基础上进行完善。</p>

<!-- more -->


<h2>创建一个Table</h2>

<p>打开<strong>Interface.storyboard</strong>文件，删除我们之前添加的Label，然后将一个Table组件拖拽到你的Watch屏幕中。</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-create-table-1.png" alt="pic" /></p>

<p>这里要注意一下，WatchKit中每一个WKInterfaceTableRow都是一个<strong>Table Row Controller</strong>，如果你展开它，你会发现它里面有一个<strong>Group</strong>，我们分别将一个Label和Image组件拖拽至Group中。调整Label和Image的大小，调整到你觉得合适就可以。</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-create-table-2.png" alt="pic" /></p>

<h2>创建自定义的Table Row Controller</h2>

<p>我们选中TableRowController，然后选择右侧工具栏的Identify inspector，我们可以在<strong>Custom Class</strong>一栏中看到，其实TableRowController是一个<strong>NSObject</strong>。</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-create-table-3.png" alt="pic" /></p>

<p>我们可以创建一个自己的NSObject，然后将TableRowController的class设置为我们创建的NSObject，这样就达到了自定义的目的。我们在<strong>HelloworldWatchKit WatchKit Extension</strong>目录中创建一个Swfit文件，让它继承NSObject，然后导入WatchKit框架。</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-create-table-4.png" alt="pic" /></p>

<p>将TableRowController的class设置为<code>MyTableRowController</code>，并给它设置一个Identifier。</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-create-table-5.png" alt="pic" /></p>

<p><img src="http://www.devtalking.com/postImages/watchkit-create-table-6.png" alt="pic" /></p>

<p>现在你就可以在<code>MyTableRowController</code>中添加Label和Image的<strong>IBOutlet</strong>了。</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-create-table-7.png" alt="pic" /></p>

<h2>创建数据源</h2>

<p>我们知道，在UIKit的<code>UITableView</code>或者<code>UITableViewController</code>中都有DataSource，负责Table Row中的数据，但是在WatchKit中的TableRowController并没有DataSource，但是这个概念是有的，也就是说我们要为TableRowController创建一个数据源，不论是数组还是字典。在这里，我们创建一个数组，作为TableRowController的数据源，数组中的元素都是<code>String</code>。因为我们的TableRowController中有一个Image组件、一个Label组件，所以我们将图片的名字作为数组的元素。</p>

<p>我们在<code>InterfaceController</code>中创建一个数据源<code>weather</code>数组，数组元素是图片名称，然后创建Table的IBOutlet。</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-create-table-8.png" alt="pic" /></p>

<h2>加载数据源</h2>

<p>我们在<code>InterfaceController</code>中添加<code>loadTableData()</code>方法，然后在<code>init()</code>方法中调用。</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-create-table-9.png" alt="pic" /></p>

<p>现在编译运行一下，你就会看到Watch中显示出了Table，是不是很酷呢！</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-create-table-10.png" alt="pic" /></p>

<p><img src="http://www.devtalking.com/postImages/watchkit-create-table-11.png" alt="pic" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Helloworld Apple Watch App]]></title>
    <link href="http://baxiang123.com//blog/helloworld-watchkit-app.html"/>
    <updated>2015-04-22T00:00:00+08:00</updated>
    <id>http://baxiang123.com//blog/helloworld-watchkit-app</id>
    <content type="html"><![CDATA[<p>首先我们需要下载最新的<a href="https://developer.apple.com/xcode/downloads/">Xcode 6.2</a>。
启动Xcode，选择<strong>Create a new Xcode project</strong>， 然后选择<strong>Single View Application</strong>创建一个单视图应用。</p>

<!-- more -->


<p><img src="http://www.devtalking.com/postImages/helloworld-watchkit-app1.png" alt="PIC" /></p>

<p><img src="http://www.devtalking.com/postImages/helloworld-watchkit-app2.png" alt="PIC" /></p>

<h2>创建Watch App Target</h2>

<p>选择菜单中的<strong>File -> New -> Target</strong>， 然后选择<strong>Apple Watch -> Watch App</strong>， 点击<strong>Next</strong>。</p>

<p><img src="http://www.devtalking.com/postImages/helloworld-watchkit-app3.png" alt="PIC" /></p>

<p>在Target的基本属性设置界面中不要勾选<strong>Include Notification Scene</strong> 和<strong>Include Glance Scene</strong>这两个选项，因为我们是在做一个<strong>Hello World</strong>， 最后点击<strong>Finish</strong>完成 <strong>Watch App Target</strong>的创建。</p>

<p><img src="http://www.devtalking.com/postImages/helloworld-watchkit-app4.png" alt="PIC" /></p>

<h2>添加Label</h2>

<p>打开<strong>HelloworldWatchKit Watch App</strong>目录下的 <strong>Interface.storyboard</strong>。</p>

<p><img src="http://www.devtalking.com/postImages/helloworld-watchkit-app5.png" alt="PIC" /></p>

<p><img src="http://www.devtalking.com/postImages/helloworld-watchkit-app6.png" alt="PIC" /></p>

<p>然后将一个Label拖拽到<code>InterfaceController</code>中，在Label中输入文字“Hello，World!”，并将Label的<strong>Position</strong>属性设置为 <strong>Horizontal:Center，Vertical:Center</strong>，让Label居中。这里不再需要AutoLayout。</p>

<p><img src="http://www.devtalking.com/postImages/helloworld-watchkit-app7.png" alt="PIC" /></p>

<h2>运行App</h2>

<p>首先选择Active Scheme为<strong>HelloworldWatchKit Watch App</strong>， 然后选择任意型号的iPhone模拟器。</p>

<p><img src="http://www.devtalking.com/postImages/helloworld-watchkit-app8.png" alt="PIC" /></p>

<p>运行应用，这时你可能还看不到Apple Watch模拟器，别着急，这里还需要一个设置。选择iPhone模拟器，在菜单中选择<strong>Hardware -> External Displays -> Apple Watch - 38mm | Apple Watch - 42mm</strong>。</p>

<p><img src="http://www.devtalking.com/postImages/helloworld-watchkit-app9.png" alt="PIC" /></p>

<p>然后重新运行应用，你就会看到你的第一个Apple Watch App了！</p>

<p><img src="http://www.devtalking.com/postImages/helloworld-watchkit-app10.png" alt="PIC" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WatchKit初探]]></title>
    <link href="http://baxiang123.com//blog/watchkit-initial-impressions.html"/>
    <updated>2015-04-20T00:00:00+08:00</updated>
    <id>http://baxiang123.com//blog/watchkit-initial-impressions</id>
    <content type="html"><![CDATA[<p>总体而言，WatchKit第一版SDK提供的功能远远超出了我的期望。因为我原本以为第一版WatchKit可能侧重于对iOS Today Extension功能的延伸，而不是真正开发Watch App。所以当知道真相后，我即惊讶又感到高兴，第一版WatchKit并不是我所想的那样，它可以为Watch App创建全新的交互界面，而且可以通过iOS App Extension去控制他们。</p>

<!-- more -->


<p><img src="http://www.devtalking.com/postImages/watchkit-initial-impressions-1.jpg" alt="pic" /></p>

<p>所以我们能做的并不只是一个简单的所谓iOS Apple Watch Extension的玩意，而是有很多新的功能需要我们去挖掘。目前提供的比如特定的UI控制方式  、Glance、可自定义的Notification、和Handoff的深度结合、图片缓存等等，作为开发者，这些功能已经让我为之兴奋了。</p>

<h2>Apple Watch的架构</h2>

<p>WatchKit带给我的惊讶之一是它的架构。目前Watch App的运行是由两部分相互结合进行工作的:</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-initial-impressions-2.jpg" alt="pic" /></p>

<ul>
<li><strong>你的Apple Watch</strong>主要包含用户界面元素文件（Storyboard文件和静态的图片文件）和处理用户的输入行为。并不会真正在Apple Watch中运行代码。换句话说，Apple Watch仅是一个“视图”容器。</li>
<li><strong>你的iPhone</strong>包含所有的逻辑代码用于响应用户在Apple Watch上产生的诸如应用启动、点击按钮、滑动滑杆等行为。换言之，iPhone包含了控制器和模型。</li>
</ul>


<p>有趣的是Apple Watch和iPhone的这种交互是在幕后自动完成的。你要做的工作只是在Storyboard中设置好UI的Outlet，然后其他的事都由WatchKit SDK在幕后通过蓝牙技术自动进行交互。即使iPhone和Apple Watch是两个独立的设备，你也只需要关注你本地的代码以及Outlet的连接情况，这真是一件很酷的事情。</p>

<h2>WatchKit布局</h2>

<p>一个令我惊讶的是Watch App的UI布局方式，我们不能再用AutoLayout进行布局了。取而代之的是一种新的布局方式<strong>Group</strong>，你需要将界面元素比如按钮、Label添加到Group中，然后Group会自动为你添加的界面元素在其内部进行布局。</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-initial-impressions-3.jpg" alt="pic" /></p>

<p>你可以将一个Group嵌入到另一个Group中，用于实现较为复杂一点的界面布局，并在Group中还可以设置背景色、边距、圆角半径等属性。</p>

<p>这让我想起了Java中的<a href="https://docs.oracle.com/javase/tutorial/uiswing/layout/visual.html">BoxLayout</a>或者XAML中的<a href="http://msdn.microsoft.com/en-us/library/ms754152.aspx">StackPanel</a>。</p>

<h2>Glances和Notifications</h2>

<p>Watch App中最酷的功能我觉得就是Glances和Notifications了。我个人认为，Apple Watch的应用中最有用的功能之一就是能让用户很方便的（比如一抬手）就能看到自己感兴趣的事物的提醒通知，比如有人在Twitter中提及到了你或者比特币现在的价位等等。</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-initial-impressions-4.jpg" alt="pic" /></p>

<p>Glances和Notifications能为你带来什么呢？</p>

<ul>
<li><strong>Glances</strong>能让你在应用中快速预览信息，有点像iOS8中的Today Extension。</li>
<li><strong>Notifications</strong>能让你在Apple Watch中接收到各类通知。Apple Watch中的通知分为两种级别。第一种是提示，只显示应用图标和简单的文本信息。当你抬起手腕或者点击屏幕时就会进入到第二种级别，你就可以看到该通知更多详细的信息，甚至有交互按钮。</li>
</ul>


<p>在Glance和Notification这两种情形下，你都可以点击屏幕进入到对应的Watch App中，并且使用Handoff。你甚至可以将特定的View Controller作为Glance或Notification的内容发送给用户。</p>

<p>我预期在未来几个月我们会在Glance和Notification上面投入较大的时间。</p>

<h2>动画</h2>

<p>Apple Watch中不支持动画，这多少让人觉得有点奇怪。如果你希望某个UI元素具有动画效果，你必须要生成一堆图片，这些图片的内容是连续动画每一帧的内容，然后循环显示这些图片，感觉又回到了GIF动画时代。所以在Apple Watch中不支持iOS中UIView或CALayer这种动画，只支持帧动画。</p>

<p>举个例子，你们可以看看Apple的<a href="https://developer.apple.com/library/prerelease/ios/samplecode/Lister/Introduction/Intro.html">Lister example</a>示例，你会发现Apple通过360张图片来实现一个画圆的动画效果。</p>

<p><img src="http://www.devtalking.com/postImages/watchkit-initial-impressions-5.jpg" alt="pic" /></p>

<p>这显然是一个灾难性的工作量，不过如果需要，也可以借助某些工具去生成一个动画需要的所有图片。不过，因为Apple Watch的容量很悠闲，所以你要谨慎加入帧动画，因为需要大量图片占用内存，除非有画龙点睛的动画，否则还是尽量少使用动画。</p>

<h2>设计资源</h2>

<p>如果你是一名设计者（或者对设计有浓厚的兴趣爱好），一下两点建议对你有很好的帮助：</p>

<ol>
<li>放下你手中所有的事情，阅读Apple提供的针对Apple Watch的<a href="https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/WatchHumanInterfaceGuidelines/index.html">Human Interface Guidelines (HIG)</a>。里面有非常不错的指导和参考能帮助你理解Apple Watch UI设计中你有疑惑的地方，因为设计Apple Watch App是一个全新的世界。</li>
<li>你一定要下载<a href="https://developer.apple.com/watchkit/#agreement">Apple Watch Design Resources</a>。这里有大量关于设计Apple Watch App的PSD素材，比如UI控制模型、颜色、元素间距的指导、笔画粗细的指导等等，有很多有用的东西，给我留下了非常深刻的印象，这里强烈推荐。</li>
</ol>


<p>原文地址：<a href="http://www.raywenderlich.com/89473/watchkit-initial-impressions">WatchKit: Initial Impressions</a></p>
]]></content>
  </entry>
  
</feed>
